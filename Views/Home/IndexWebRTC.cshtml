
  
        <main b-7lzq30u95c role="main" class="pb-3">
            <style>
                .fixed-size-div {
                    height: 400px;
                    overflow-y: auto;
                }
            </style>
            <link href="/css/chatcss.css" rel="stylesheet" />
            <div class="row ">
                <div class="col-12 card card-body">
                    <div class="d-flex mx-auto">
                        Seu Id:&nbsp;<p id="IdUser"></p>
                    </div>
                    <ul id="usersdata" class="list-group">
                        <li class="list-group-item">Usuarios Online</li>
                        <li class="list-group-item usuarios" data-cid="" data-username=""></li>
                    </ul>
                    <div class="row g-3 align-items-center mx-auto mt-2">
                        <div class="col-auto">
                            <label for="inputPassword6" class="col-form-label">Digite o Id da pessoa pra ligar</label>
                        </div>
                        <div class="col-auto">
                            <input type="text" id="inputIdLigar" class="form-control" aria-describedby="passwordHelpInline">
                        </div>
                        <div class="col-auto">
                            <button type="submit" class="btn btn-primary" id="BtnLigar">Ligar</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    Você

                    <div class="card card-body bg-light m-2 ">
                        <video id="localVideo" playsinline autoplay muted></video>
                    </div>
                </div>
                <div class="col-6">
                    Servidor

                    <div class="card card-body bg-light m-2 ">
                        <video id="remoteVideo" playsinline autoplay></video>
                    </div>
                </div>
            </div>
            <div class="container col-6">
                <form id="file-upload-form">
                    <input type="file" name="pdfFile" />
                    <button type="submit">Enviar</button>
                </form>
            </div>
            <main class="content" id="divChat">
                <div class="container p-0">

                    <h1 class="h3 mb-3">Messages</h1>

                    <div class="card">
                        <div class="row g-0">

                            <div class="col-12 ">
                                <div class="py-2 px-4 border-bottom d-none d-lg-block">
                                    <div class="d-flex align-items-center py-1">
                                        <div class="position-relative">
                                            <img src="https://bootdey.com/img/Content/avatar/avatar3.png" class="rounded-circle mr-1" alt="Sharon Lessman" width="40" height="40">
                                        </div>
                                        <div class="flex-grow-1 pl-3">
                                            <strong>Sharon Lessman</strong>
                                            <div class="text-muted small"><em>Typing...</em></div>
                                        </div>
                                        <div>
                                            <button class="btn btn-primary btn-lg mr-1 px-3"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-phone feather-lg"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg></button>
                                            <button class="btn btn-info btn-lg mr-1 px-3 d-none d-md-inline-block"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-video feather-lg"><polygon points="23 7 16 12 23 17 23 7"></polygon><rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect></svg></button>
                                            <button class="btn btn-light border btn-lg px-3"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-more-horizontal feather-lg"><circle cx="12" cy="12" r="1"></circle><circle cx="19" cy="12" r="1"></circle><circle cx="5" cy="12" r="1"></circle></svg></button>
                                        </div>
                                    </div>
                                </div>

                                <div class="position-relative">
                                    <div class="chat-messages p-4" id="Chatmesseger">

                             @*           <div class="chat-message-right pb-4">
                                            <div>
                                                <img src="https://bootdey.com/img/Content/avatar/avatar1.png" class="rounded-circle mr-1" alt="Chris Wood" width="40" height="40">
                                                <div class="text-muted small text-nowrap mt-2">2:33 am</div>
                                            </div>
                                            <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                                                <div class="font-weight-bold mb-1">You</div>
                                                Lorem ipsum dolor sit amet, vis erat denique in, dicunt prodesset te vix.
                                            </div>
                                        </div>

                                        <div class="chat-message-left pb-4">
                                            <div>
                                                <img src="https://bootdey.com/img/Content/avatar/avatar3.png" class="rounded-circle mr-1" alt="Sharon Lessman" width="40" height="40">
                                                <div class="text-muted small text-nowrap mt-2">2:34 am</div>
                                            </div>
                                            <div class="flex-shrink-1 bg-light rounded py-2 px-3 ml-3">
                                                <div class="font-weight-bold mb-1">Sharon Lessman</div>
                                                Sit meis deleniti eu, pri vidit meliore docendi ut, an eum erat animal commodo.
                                            </div>
                                        </div>*@





                                    </div>
                                </div>

                                <form class="flex-grow-0 py-3 px-4 border-top" id="formchjat">
                                    <div class="input-group">
                                        <input type="text" id="ChatConversa" class="form-control" placeholder="Type your message">
                                        <button class="btn btn-primary">Send</button>
                                    </div>
                                </form>

                            </div>
                        </div>
                    </div>
                </div>
            </main>
            <div class="modal fade" id="callmodal" data-bs-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="callmodaltitle" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="callmodaltitle">Olá</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body"></div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" onclick="declineCall()" data-dismiss="modal">Decline</button>
                            <button type="button" class="btn btn-primary" onclick="acceptCall()">Accept</button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
 
 @section Scripts
    {
    <script>
        'use strict';

        const localVideo = document.getElementById('localVideo');
        const remoteVideo = document.getElementById('remoteVideo');

        var hubUrl = document.location.origin + '/cnnctn';
        var hubConnection = new signalR.HubConnectionBuilder().withUrl(hubUrl, signalR.HttpTransportType.WebSockets).configureLogging(signalR.LogLevel.Debug).build();

        //  var hubConnection = new signalR.HubConnectionBuilder().withUrl(hubUrl).build();

        var IdConecçao = null
        var configuration = {
            "iceServers": [{
                "url": "stun:stun.l.google.com:19302"
            }]
        };
        var peerConnection = null
        //instancia o webRTC
        var users = [];
        var user = null;
        var caller = null;

        $(document).ready(function () {
            $('#divChat').hide()

            // digo q se receber video, colocar na div "remoteVideo"

            // ligarWebCam()

            hubConnection.start().then(() => {
                user = generateId();
                userJoin(user);
                IdConecçao = hubConnection.connection.connectionId
                console.info(`Connected as ${user}`);

            }
            ).catch(err => console.error(err));

            hubConnection.on('AttUsuariosOnline', (userList) => {
                console.info('Check online users...' + JSON.stringify(userList));
                users = userList;

                $('#usersdata li.usuarios').remove();

                $.each(userList, function (index) {
                    var userIcon = ''
                        , status = '';
                    if (userList[index].username === $("#lblUser").text()) {
                    } else {

                        if (userList[index].username !== user) {
                            var onlineUsers = '';
                            onlineUsers += '<li class="list-group-item usuarios" data-cid=' + userList[index].connectionId + ' data-username=' + userList[index].username + '>';
                            onlineUsers += '<div class="d-lg-flex flex-row">';
                            onlineUsers += '<div class="m-1 d-lg-flex justify-content-center align-items-center"><small>   ' + userList[index].connectionId + '</small></div>';
                            onlineUsers += '<div class="d-flex flex-row justify-content-center align-items-center">';
                            onlineUsers += '<div class="m-1 d-lg-flex justify-content-center align-items-center"><span data-callstatus=' + userList[index].inCall + '>' + ((userList[index].inCall == true) ? '<small>(Ocupado)</small>' : '<small>(Disponivel)</small>') + '</span></div>';
                            onlineUsers += '<div class="m-2"><button id="btnCallUser" type="button" class="btn btn-primary btn-sm" ' + ((userList[index].inCall == true) ? 'disabled' : '') + ' onclick="callUser(\'' + userList[index].connectionId + '\')">Ligar</button></div>';
                            onlineUsers += '<div class="m-2"><button id="btnEndCall" type="button" class="btn btn-primary btn-sm" ' + ((userList[index].inCall == true) ? '' : 'disabled') + ' onclick="endCall(\'' + userList[index].connectionId + '\')">Desligar</button></div>';
                            onlineUsers += '</div>';

                            onlineUsers += '</div></li>';

                            $('#usersdata').append(onlineUsers);
                        }

                    }
                });

                const isCaller = users.filter(u => u.username === user);
                peerConnection = new RTCPeerConnection(configuration);
                peerConnection.onicecandidate = event => {
                    if (event.candidate) {
                        var targetUserConnectionId = users.filter(u => u.username != user);
                        console.info(`Target user: ${targetUserConnectionId[0].username}`);
                        hubConnection.invoke('sendData', JSON.stringify({ 'candidate': event.candidate }), targetUserConnectionId[0].connectionId).catch(err => console.error(err));
                    }
                };
                if (isCaller[0].inCall==true) {
                    console.info('Someone is also here...');
                    peerConnection.onnegotiationneeded = () => {
                        peerConnection.createOffer()
                            .then((description) => {
                                peerConnection.setLocalDescription(
                                    description,
                                    () => {
                                        var targetUserConnectionId = users.filter(u => u.username != user);
                                        
                                        hubConnection.invoke('sendData', JSON.stringify({ 'sdp': peerConnection.localDescription }), targetUserConnectionId[0].connectionId).catch(err => console.error(err));
                                    },
                                    (err) => console.info(err)
                                );
                            })
                            .catch(err => console.error(err));
                    }
                }

                peerConnection.ontrack = event => {
                    const stream = event.streams[0];
                    if (!remoteVideo.srcObject || remoteVideo.srcObject.id !== stream.id) {
                        remoteVideo.srcObject = stream;
                    }
                };

                navigator.mediaDevices.getUserMedia({
                    audio: true,
                    video: true,
                }).then(stream => {
                    // Display your local video in #localVideo element
                    localVideo.srcObject = stream;
                    // Add your stream to be sent to the conneting peer
                    stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));
                }, (err) => console.error(err));


                
            });
            

            hubConnection.on('receiveData', (signalingUser, data) => {
                var message = JSON.parse(data);

                if (message.sdp) {

                    peerConnection.setRemoteDescription(new RTCSessionDescription(message.sdp), () => {

                        if (peerConnection.remoteDescription.type === 'offer') {
                            peerConnection.createAnswer().then((description) => {
                                peerConnection.setLocalDescription(description, () => {
                                    var targetUserConnectionId = users.filter(u => u.username != user);
                                    hubConnection.invoke('sendData', JSON.stringify({
                                        'sdp': peerConnection.localDescription
                                    }), targetUserConnectionId[0].connectionId).catch(err => console.error(err));
                                }
                                    , (err) => console.error(err));
                            }
                            ).catch(err => console.error(err));
                        }
                    }
                        , (err) => console.error(err));

                } else if (message.candidate) {

                    peerConnection.addIceCandidate(new RTCIceCandidate(message.candidate), () => { }
                        , (err) => console.error(err));
                }

            }
            );

            hubConnection.on('receivedatamsg', (signalingUser, data) => {
                let dataAtual = new Date();
                let horas = dataAtual.getHours();
                let minutos = dataAtual.getMinutes();

                var msg = data.replace(/&/g, "&").replace(/</g, "<").replace(/>/g, ">");


                                                                    var msgem = `
                                                                            <div class="chat-message-left pb-4">
                                                    <div>
                                                        <img src="https://bootdey.com/img/Content/avatar/avatar3.png" class="rounded-circle mr-1" alt="Sharon Lessman" width="40" height="40">
                                                        <div class="text-muted small text-nowrap mt-2">2:34 am</div>
                                                    </div>
                                                    <div class="flex-shrink-1 bg-light rounded py-2 px-3 ml-3">
                                                        <div class="font-weight-bold mb-1">Sharon Lessman</div>
                                                               ${msg}
                                                    </div>
                                                </div>
                                                                    `

                $("#Chatmesseger").append(msgem);
                scrollToBottom('DivSubnir')

            }
            )

            hubConnection.on('LidacaoNegada', (callingUser, msg) => {
                console.info('Ligação negada: ' + JSON.stringify(callingUser));
                alert("Ligação negada: " + msg)
            }
            );

            // onde dispara a ligação recebida e salvo o user na variavel "caller"
            hubConnection.on('ChamadaRecebida', (callingUser) => {
                console.info('Chamada Recebida de: ' + JSON.stringify(callingUser));
                caller = callingUser;
                $('#callmodal').attr('data-callinguser', `${callingUser.username}`);
                $('#callmodal .modal-body').text(`${callingUser.username} Está ligando...`);
                $('#callmodal').modal('show');
            }
            );

            hubConnection.on('LigaCaoAceita', (acceptingUser) => {

                $('#divChat').show()

                caller = acceptingUser;

                console.info('Ligação aceita ' + JSON.stringify(acceptingUser) + '.');

            }
            );

            hubConnection.on('LigacaoDesligada', (acceptingUser) => {
                console.log("ligação desligada")
                $("#Chatmesseger").html('');
                $('#divChat').hide()
                //location.reload()

            }
            );

            $('#BtnLigar').on('click', () => {
                let id = $('#inputIdLigar').val()

                if (!id) {
                    SweetAlerta.fire({
                        title: 'Coloque o ID',
                        text: "Não colocou o id de quem vai ligar",
                        icon: 'warning',
                        showCancelButton: false,
                        confirmButtonText: 'Entendi',
                        cancelButtonText: 'No, cancel!',
                        reverseButtons: true
                    })

                } else {
                    callUser(id)
                }

            }
            )
            // metodo de ligar pelo butom

            $("#formchjat").on("submit", (event) => {
                var valueMsg = $("#ChatConversa").val();
                var dataAtual = new Date();
                var horas = dataAtual.getHours();
                var minutos = dataAtual.getMinutes();
                var mensagem = `   <div class="chat-message-right pb-4">
                                                <div>
                                                    <img src="https://bootdey.com/img/Content/avatar/avatar1.png" class="rounded-circle mr-1" alt="Chris Wood" width="40" height="40">
                                                    <div class="text-muted small text-nowrap mt-2">2:33 am</div>
                                                </div>
                                                <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                                                    <div class="font-weight-bold mb-1">You</div>
                                                           ${valueMsg}
                                                </div>
                                            </div>


                                                            `



                $("#Chatmesseger").append(mensagem);
                scrollToBottom('DivSubnir')



                hubConnection.invoke("senddatamsg", valueMsg, caller.connectionId).catch(function (err) {
                    return console.error(err.toString());
                });
                event.preventDefault();
            });


            document.getElementById("file-upload-form").addEventListener("submit", function (event) {
                event.preventDefault();

                var formData = new FormData(event.target);
                var pdfFile = formData.get("pdfFile");

                const reader = new FileReader();

                reader.onload = (event) => {
                    const pdfBytes = new Uint8Array(event.target.result);
                    hubConnection.invoke("enviararquivo", pdfBytes, "nome do arquivo").catch(function (error) {
                        console.log(error);
                    });
                }
                    ;

                reader.readAsArrayBuffer(pdfFile);
            });

            hubConnection.on("receberarquivo", function (pdfBase64) {
                var pdfBytes = atob(pdfBase64);
                // converte de Base64 para bytes
                var blob = new Blob([pdfBytes], {
                    type: "application/pdf"
                });
                var pdfUrl = URL.createObjectURL(blob);
                window.open(pdfUrl, "_blank");
            });

        })
                    // final document ready
    </script>
    <script src="/js/funcoeswebrtc.js"></script>

            }